#!/bin/bash

uid=$(id -u)
gid=$(id -g)
noUmountRegex="(/$|/boot|/home|/perso|/save)"
crypt=0 # 0: no, 1: veracrypt
mode=0

# info <msg>
function info() {
    [ "$1" == "" ] && exit 1
    notify-send "Info" "$1"
}

# error <msg>
function error() {
    [ "$1" == "" ] && exit 1
    notify-send "Error" "$1"
}

# echo_err <msg>
function echo_err() {
    [ -z "$1" ] && exit 1
    echo -e "\e[31mERROR :\e[0m $1" > /dev/stderr
}

function helpFunc() {
    echo "Usage: $(basename "$0") [options]

Option:
-h or --help .................... Show this help message and exit
-v or --veracrypt ............... Use veracrypt
-l or --luks .................... Use luks (with cryptsetup) (not implemented yet)
-m or --mount ................... Mount the disk
-u or --umount .................. Unmount the disk"
}

# mountFunc <diskToMount> <mountPoint>
function mountFunc() {
    ([ "$1" == "" ] || [ "$2" == "" ]) && exit 1
    if [ $crypt -eq 1 ]; then
        veracrypt "$1" "$2" 2> /dev/null && return 0 || return 1
    # elif [ $crypt -eq 2 ]; then
    #     sudo cryptsetup luksOpen usbcrypt 2> /dev/null && return 0 || return 1
    #     sudo mount -o "uid=$uid,gid=$gid" /dev/mapper/usbcrypt "$2" 2> /dev/null && return 0 || return 1
    else
        sudo mount -o "uid=$uid,gid=$gid" "$1" "$2" 2> /dev/null && return 0 || return 1
    fi
}

# umountFunc <diskToUmount>
function umountFunc() {
    [ "$1" == "" ] && exit 1
    if [ $crypt -eq 1 ]; then
        veracrypt -d "$1" 2> /dev/null && return 0 || return 1
    # elif [ $crypt -eq 2 ]; then
    #     sudo cryptsetup luksClose "$1" 2> /dev/null && return 0 || return 1
    else
        sudo umount "$1" 2> /dev/null && return 0 || return 1
    fi
}

function mountDisk() {
    local mountable=$(lsblk -lp | \
        grep "part *$" | \
        awk '{print $1, "(" $4 ")"}'
    )
    [ "$mountable" = "" ] && error "No mountable disks found" && exit 1

    local diskToMount=$(echo -e "$mountable" | rofi -dmenu -p "Mount which disk" | awk '{print $1}')
    [ "$diskToMount" = "" ] && exit 1
    local mountPoint=$(find /media -maxdepth 1 -type d 2> /dev/null | rofi -dmenu -p "Mount to which directory")
    [ "$mountPoint" = "" ] && exit 1

    [ ! -d "$mountPoint" ] && mkdir -p "$mountPoint"

    if mountFunc "$diskToMount" "$mountPoint"; then
        info "Disk mounted to \"$mountPoint\""
    else
        error "Failed to mount disk"
        exit 1
    fi
}

function umountDisk() {
    if [ $crypt -eq 0 ]; then
        local mounted=$(lsblk -lp | \
            grep "part /" | \
            grep -Ev "$noUmountRegex" | \
            awk '{print $1, "(" $4 ")"}'
        )
    else
        local mounted=$(lsblk -lp | \
            grep "dm   /" | \
            awk '{print $7, "(" $4 ")"}'
        )
    fi
    [ "$mounted" = "" ] && error "No mounted disks found" && exit 1

    local diskToUmount=$(echo -e "$mounted" | rofi -dmenu -p "Umount which disk" | awk '{print $1}')
    [ "$diskToUmount" = "" ] && exit 1

    if umountFunc "$diskToUmount"; then
        info "Disk \"$diskToUmount\" unmounted"
    else
        error "Failed to unmount disk"
        exit 1
    fi
}

if [ $# -ge 1 ]; then
    for i in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpFunc
                exit 0;;
            -v | --veracrypt)
                crypt=1;;
            -m | --mount)
                mode=1;;
            -u | --umount)
                mode=2;;
            "");;
            *)
                echo_err $"Unknown parameter \"$1\""
                exit 1
        esac
        shift
    done
fi

if [ $mode -eq 1 ]; then
    mountDisk
elif [ $mode -eq 2 ]; then
    umountDisk
else
    helpFunc
    exit 1
fi
