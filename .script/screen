#!/bin/bash
# author : lordpax
# screen v1.2

action=0
ignoreScreen="None"
version="v1.2"
param=""
dependencies="rofi notify-send i3-msg xrandr awk grep seq"

# info <msg>
function info() {
    [ -z "$1" ] && exit 1
    notify-send "Info" "$1"
}

# error <msg>
function error() {
    [ -z "$1" ] && exit 1
    notify-send "Error" "$1"
}

# echo_err <msg>
function echo_err() {
    [ -z "$1" ] && exit 1
    echo -e "\e[31mERROR :\e[0m $1" > /dev/stderr
}

function helpFunc() {
    echo "Usage: $(basename "$0") [options]

Option:
-h or --help ............................ Show this help message and exit
-v or --version ......................... Show version
-c or --connect ......................... Connect a screen
-d or --disconnect ...................... Disconnect a screen
-s or --status .......................... Show the status of the screen
--connected <primary|secondary|all> ..... Get the connected screen"
}

function checkDependencies() {
    for dependency in $dependencies; do
        ! command -v "$dependency" > /dev/null 2>&1 && \
            echo_err "Dependency \"$dependency\" not found" && exit 1
    done
}

# getConnectedScreen <primary|secondary|all> [ignore]
function getConnectedScreen() {
    [ -z "$1" ] && exit 1

    local scr=$(
        xrandr | \
        grep " connected"
    )

    case $1 in
        primary)
            scr=$(echo "$scr" | grep "primary");;
        secondary)
            scr=$(echo "$scr" | grep -v "primary");;
        all);;
        *)
            exit 1;;
    esac

    scr=$(echo "$scr" | awk '{print $1}')

    [ "$2" != "" ] && echo "$scr" | grep -vE "$2" || echo "$scr"
}

# getScreenMode <screen>
function getScreenMode() {
    [ -z "$1" ] && exit 1
    xrandr | \
        awk -v monitor="^$1 connected" '/connected/ {p = 0} $0 ~ monitor {p = 1} p' | \
        grep -v " connected" | \
        grep -oP '\d+x\d+'
}

function connectScreen() {
    local sideList="none\nright-of\nleft-of\nabove\nbelow\nsame-as" 
    local rotationList="none\nnormal\nleft\nright\ninverted"
    local commande="xrandr"

    local screens=$(getConnectedScreen all "$ignoreScreen")
    [ -z "$screens" ] && error "No screen found" && exit 1

    local screen=$(echo "$screens" | rofi -dmenu -p "Connect a screen")
    [ -z "$screen" ] && exit 1

    commande="$commande --output $screen"

    local modeList=$(getScreenMode "$screen")
    local mode=$(echo -e "auto\n$modeList" | rofi -dmenu -p "Choose mode")
    [ -z "$mode" ] && exit 1
    commande=$([ "$mode" != "auto" ] && echo "$commande --mode $mode" || echo "$commande --auto")

    local side=$(echo -e "$sideList"| rofi -dmenu -p "Choose side")
    [ -z "$side" ] && exit 1
    if [ "$side" != "none" ]; then
        local otherScreens=$(getConnectedScreen all "^$screen$")
        [ -z "$otherScreens" ] && exit 1

        local otherScreen=$(echo "$otherScreens" | rofi -dmenu -p "Screen side")
        [ -z "$otherScreen" ]  && exit 1

        commande="$commande --$side $otherScreen"
    fi

    local rotation=$(echo -e "$rotationList" | rofi -dmenu -p "Choose rotation")
    [ -z "$rotation" ] && exit 1
    [ "$rotation" != "none" ] && commande="$commande --rotate $rotation"

    if $commande; then
        sleep 1
        info "Screen connected" 
        i3-msg "restart"
    else
        error "Screen not connected"
    fi
}

function disconnectScreen() {
    local screens=$(getConnectedScreen all "$ignoreScreen")
    [ -z "$screens" ] && error "No screen found" && exit 1

    local screen=$(echo "$screens" | rofi -dmenu -p "Disconnect a screen")
    [ -z "$screen" ] && exit 1

    if xrandr --output "$screen" --off; then
        sleep 1
        info "Screen disconnected"
        i3-msg "restart"
    else
        error "Screen not disconnected"
    fi
}

if [ $# -ge 1 ]; then
    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpFunc
                exit 0;;
            -v | --version)
                echo "$version"
                exit 0;;
            -c | --connect)
                action=1;;
            -d | --disconnect)
                action=2;;
            -s | --status)
                action=3;;
            --connected)
                action=4
                param="$2"
                shift;;
            "");;
            *)
                echo_err "Unknown parameter $1"
                exit 1;;
        esac
        shift
    done
fi

checkDependencies

case $action in
    1)
        connectScreen;;
    2)
        disconnectScreen;;
    3)
        xrandr --listmonitors;;
    4)
        getConnectedScreen "$param" "$ignoreScreen";;
    *)
        helpFunc
        exit 1;;
esac
